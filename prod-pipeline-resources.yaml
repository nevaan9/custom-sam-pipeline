AWSTemplateFormatVersion : '2010-09-09'
Description: >
  Resources needed for our stage pipeline to deploy the lambdas to the prod account
Resources:
  # This role will be doing all the bulk of the work. 
  # It will be building, packaging and deploying aws sam templates in the prod account
  ProdPipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Role
          Value: ServerlessPipelineExecutionRole # pipeline-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: arn:aws:iam::309208110416:user/veociServerlessPipelineResour-DevStagePipelineUser-V5N56AP5WN2J # allow stage account user to assume this role
          Action: sts:AssumeRole
        - Effect: Allow
          Principal:
            AWS: arn:aws:iam::309208110416:root # allow stage account to assume this role (only with tag ServerlessCodeBuildServiceRole though)
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              aws:PrincipalTag/Role: ServerlessCodeBuildServiceRole # aws-sam-pipeline-codebuild-service-role
      Policies:
        - PolicyName: ProdPipelineExecutionRolePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt ProdPipelineCloudFormationExecutionRole.Arn
              - Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplateSummary
                  - cloudformation:DescribeStackResource
                Resource: "*"
                Effect: Allow
              - Action:
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:GetBucket*
                  - s3:List*
                Resource:
                  - !Sub "${ProdPipelineSamPackageArtifactsBucket.Arn}/*"
                  - !GetAtt ProdPipelineSamPackageArtifactsBucket.Arn
                Effect: Allow
  # Similar to above. Needed to deploy aws sam templates
  ProdPipelineCloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action: "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
      Policies:
        - PolicyName: GrantCloudFormationFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  # -------- All the below resource are S3 bukcets to store the packaged aws sam templates. There is a main bucket with logging enabled, and there are bucket policies defied below as well ----------------
  ProdPipelineSamPackageArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref ProdPipelineSamPackageArtifactsLoggingBucket
        LogFilePrefix: "artifacts-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ProdPipelineSamPackageArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProdPipelineSamPackageArtifactsBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub "${ProdPipelineSamPackageArtifactsBucket.Arn}/*"
              - !GetAtt ProdPipelineSamPackageArtifactsBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: "false"
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt ProdPipelineExecutionRole.Arn
                - !GetAtt ProdPipelineCloudFormationExecutionRole.Arn
            Action:
              - s3:GetObject*
              - s3:PutObject*
              - s3:GetBucket*
              - s3:List*
            Resource:
              - !Sub "${ProdPipelineSamPackageArtifactsBucket.Arn}/*"
              - !GetAtt ProdPipelineSamPackageArtifactsBucket.Arn
  ProdPipelineSamPackageArtifactsLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: "LogDeliveryWrite"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ProdPipelineSamPackageArtifactsLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProdPipelineSamPackageArtifactsLoggingBucket
      PolicyDocument:
        Statement:
          - Effect: "Deny"
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Sub "${ProdPipelineSamPackageArtifactsLoggingBucket.Arn}/*"
              - !GetAtt ProdPipelineSamPackageArtifactsLoggingBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false